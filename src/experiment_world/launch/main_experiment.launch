<launch>

  <!-- By default, we are not in debug mode -->
  <arg name="debug" default="false" />
  <arg name="cube_positions_file" default="/catkin_ws/src/experiment_world/positions.yaml" />

  <!--
  By default, hide joint_state_publisher's GUI

  MoveIt!'s "demo" mode replaces the real robot driver with the joint_state_publisher.
  The latter one maintains and publishes the current joint configuration of the simulated robot.
  It also provides a GUI to move the simulated robot around "manually".
  This corresponds to moving around the real robot without the use of MoveIt.
  -->
  <arg name="use_gui" default="false" />
  <arg name="rviz_gui" default="true" />

  <!-- Gazebo specific options -->
  <arg name="gazebo_gui" default="true"/>
  <arg name="paused" default="false"/>
  <!-- By default, use the urdf location provided from the package -->
  <arg name="urdf_path" default="$(find homestri_robot_description)/urdf/ur5_e_robotiq_2f_85.urdf.xacro"/>

  <!-- launch the gazebo simulator and spawn the robot -->
  <!-- startup simulated world -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" default="$(find experiment_world)/world/ISS.world"/>
    <arg name="paused" value="$(arg paused)"/>
    <arg name="gui" value="$(arg gazebo_gui)"/>
  </include>

  <!-- Prepare the world for cubes -->
  <rosparam command="load" file="$(arg cube_positions_file)" />
  <node name="cube_spawner" pkg="spawn_objects" type="spawn_objects_node" respawn="false" output="screen"/>

  <!-- port matches Dockerfile (default), should probably obfuscate a tiny bit-->
  <include file="$(find rosbridge_server)/launch/rosbridge_websocket.launch" > 
     <arg name="port" value="9090"/>
  </include>

  <!-- Add cameras -->
  <!-- <node name="spawn_gazebo_model_camera_down" pkg="gazebo_ros" type="spawn_model" args="-sdf -file $(find experiment_world)/remote_camera/model.sdf -model remote_camera_down -x 2.5 -y 0.6 -z 1.0 -R 1.57 -P 1.5 -Y 3"
    respawn="false" output="screen" /> -->
  <!-- <node pkg="image_transport" type="republish" name="republish_camera_down" output="screen" args="raw in:=/camera/remote_camera_down/image_raw compressed out:=/camera/remote_camera_down"/> -->

  <node name="spawn_gazebo_model_camera_rack" pkg="gazebo_ros" type="spawn_model" args="-sdf -file $(find experiment_world)/remote_camera/model.sdf -model remote_camera_rack -x 2.0 -y -1.0 -z 0.8 -R 0.0 -P 0.2 -Y 1.5"
    respawn="false" output="screen" />
  <node pkg="image_transport" type="republish" name="republish_camera_rack" output="screen" args="raw in:=/camera/remote_camera_rack/image_raw compressed out:=/camera/remote_camera_rack"/>

  <!-- send robot urdf to param server -->
  <param name="robot_description" command="$(find xacro)/xacro $(arg urdf_path) xyz:='1.4 1.0 0.2' rpy:='1.5708 0.0 0.0'" />

  <!-- Load updated joint limits (override information from URDF) -->
  <group ns="robot_description_planning">
    <rosparam command="load" file="$(find experiment_world)/joint_limits.yaml"/>
  </group>

  <!-- push robot_description to factory and spawn robot in gazebo at the origin, change x,y,z arguments to spawn in a different position -->
  <node name="spawn_gazebo_model" pkg="gazebo_ros" type="spawn_model" args="-urdf -param robot_description -model robot"
    respawn="false" output="screen" />

  <include file="$(find moveit_config)/launch/ros_controllers.launch"/>

  <!-- We do not have a robot connected, so publish fake joint states -->
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
    <param name="use_gui" value="$(arg use_gui)"/>
    <rosparam param="source_list">[/joint_states]</rosparam>
  </node>

  <!-- Given the published joint states, publish tf for the robot links -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" />

  <!-- Remap follow_joint_trajectory -->
  <remap from="/follow_joint_trajectory" to="/arm_controller/follow_joint_trajectory"/>

  <!-- Run the main MoveIt! -->
  <include file="$(find moveit_config)/launch/move_group.launch">
    <arg name="load_robot_description" default="false" />
    <arg name="allow_trajectory_execution" value="true"/>
    <arg name="fake_execution" value="false"/>
    <arg name="info" value="true"/>
    <arg name="debug" value="$(arg debug)"/>
  </include>  

  <!-- Run Rviz and load the camera config to see the state of the move_group node -->
  <include file="$(find moveit_config)/launch/moveit_rviz.launch" if="$(arg rviz_gui)">
    <arg name="rviz_config" value="$(find experiment_world)/launch/moveit_camera.rviz"/>
    <arg name="debug" value="$(arg debug)"/>
  </include>

  <!-- Get the ISS scene to prevent collisions -->
  <arg name="scene_file" default="$(find experiment_world)/world/ISS.scene"/> 
  <node name = "moveit_publish_scene_from_text" pkg= "moveit_ros_planning" type = "moveit_publish_scene_from_text" args= "$(arg scene_file)"/>

  <!-- the node to move the cubes around! -->
  <node name="picking" pkg="target_pose" type="target_pose_node" respawn="true" output="screen" />

</launch>
